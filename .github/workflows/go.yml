name: Go

on:
  push:
    branches: [ "main" ]
    tags:
      - "*.*.*" 
  pull_request:
    branches: [ "main" ]

jobs:

  build_on_macos:

    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Install dependencies
      run: |
        go get golang.org/x/tools/cmd/goimports@latest
        go get github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    - name: Set version
      if: github.ref_type == 'tag'
      run: |
        sed -i '' 's/version = \"dev\"/version = \"${{ github.ref_name }}\"/' main.go

    - name: Lint
      run: |
        make lint || true

    - name: Build
      run: |
        GOARCH=arm64 go build -ldflags="-s -w" -o mobilecli-arm64
        GOARCH=amd64 go build -ldflags="-s -w" -o mobilecli-amd64
        lipo mobilecli-arm64 mobilecli-amd64 -create -output mobilecli-darwin
        rm mobilecli-arm64 mobilecli-amd64
        ./mobilecli-darwin --version

    - name: Upload macos build artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: |
          mobilecli-darwin
        retention-days: 1
        overwrite: true

  build_on_linux:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Install dependencies
      run: |
        go get golang.org/x/tools/cmd/goimports@latest
        go get github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    - name: Set version
      if: github.ref_type == 'tag'
      run: |
        sed -i 's/version = \"dev\"/version = \"${{ github.ref_name }}\"/' main.go
  
    - name: Build
      run: |
        GOARCH=arm64 go build -ldflags="-s -w" -o mobilecli-linux-arm64
        GOARCH=amd64 go build -ldflags="-s -w" -o mobilecli-linux-amd64
        ./mobilecli-linux-amd64 --version

    - name: Upload macos build artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          mobilecli-linux-arm64
          mobilecli-linux-amd64
        retention-days: 1
        overwrite: true

  release:
    runs-on: ubuntu-latest
    needs: [build_on_linux, build_on_macos]
    steps:
    - uses: actions/checkout@v4

  publish:

    runs-on: ubuntu-latest
    needs: [build_on_linux, build_on_macos]
    steps:
    - uses: actions/checkout@v4

    - name: Download darwin build
      uses: actions/download-artifact@v4
      with:
        name: macos-build
        path: mobilecli-darwin

    - name: Download linux build
      uses: actions/download-artifact@v4
      with:
        name: linux-build
        path: mobilecli-linux

    - name: Zip builds
      run: |
        mkdir dist
        cd dist
        # mac
        cp ../mobilecli-darwin/mobilecli-darwin mobilecli
        zip -9 ../mobilecli-${{ github.ref_name }}-macos.zip mobilecli
        rm -f mobilecli

        # linux-amd64
        cp ../mobilecli-linux/mobilecli-linux-amd64 mobilecli
        zip -9 ../mobilecli-${{ github.ref_name }}-linux-amd64.zip mobilecli
        rm -f mobilecli

        # linux-arm64
        cp ../mobilecli-linux/mobilecli-linux-arm64 mobilecli
        zip -9 ../mobilecli-${{ github.ref_name }}-linux-arm64.zip mobilecli
        rm -f mobilecli
        cd ..

        ls -l *.zip
        rm -rf dist

    - name: Upload to GitHub Release
      if: github.ref_type == 'tag'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASES_TOKEN }}
      with:
        name: Version ${{ github.ref_name }}
        files: |
          mobilecli-*.zip
  
    - name: Publish
      if: github.ref_type == 'tag'
      env:
        NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      run: |
        # prepare binaries for distribution
        mv ./mobilecli-darwin/mobilecli-darwin publish/npm/bin
        mv ./mobilecli-linux/mobilecli-linux-amd64 publish/npm/bin
        mv ./mobilecli-linux/mobilecli-linux-arm64 publish/npm/bin
        chmod +x publish/npm/bin/*
        # setup npmrc
        echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" >> ~/.npmrc
        # publish to npm
        cd publish/npm
        npm version "${{ github.ref_name }}" --no-git-tag-version
        npm install
        npm publish
